# coding: utf-8

"""
    AXIBO OPENSOURCE API

    No description provided   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@axibo.com
    
"""


import pprint
import re  # noqa: F401

import six


class SystemMsg(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operation': 'str',
        'progress': 'int',
        'motion_status': 'InlineResponse200',
        'wifi': 'Wifi',
        'time_stamp': 'int',
        'battery_status': 'int',
        'backend_errors': 'Errors'
    }

    attribute_map = {
        'operation': 'operation',
        'progress': 'progress',
        'motion_status': 'motionStatus',
        'wifi': 'wifi',
        'time_stamp': 'timeStamp',
        'battery_status': 'batteryStatus',
        'backend_errors': 'backendErrors'
    }

    def __init__(self, operation=None, progress=None, motion_status=None, wifi=None, time_stamp=None, battery_status=None, backend_errors=None):  # noqa: E501
        """SystemMsg - a model defined in Swagger"""  # noqa: E501

        self._operation = None
        self._progress = None
        self._motion_status = None
        self._wifi = None
        self._time_stamp = None
        self._battery_status = None
        self._backend_errors = None
        self.discriminator = None

        if operation is not None:
            self.operation = operation
        if progress is not None:
            self.progress = progress
        if motion_status is not None:
            self.motion_status = motion_status
        if wifi is not None:
            self.wifi = wifi
        self.time_stamp = time_stamp
        self.battery_status = battery_status
        self.backend_errors = backend_errors

    @property
    def operation(self):
        """Gets the operation of this SystemMsg.  # noqa: E501

        Controller condition   # noqa: E501

        :return: The operation of this SystemMsg.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this SystemMsg.

        Controller condition   # noqa: E501

        :param operation: The operation of this SystemMsg.  # noqa: E501
        :type: str
        """
        allowed_values = ["in moition", "tracking", "detecting", "idle"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def progress(self):
        """Gets the progress of this SystemMsg.  # noqa: E501


        :return: The progress of this SystemMsg.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this SystemMsg.


        :param progress: The progress of this SystemMsg.  # noqa: E501
        :type: int
        """

        self._progress = progress

    @property
    def motion_status(self):
        """Gets the motion_status of this SystemMsg.  # noqa: E501


        :return: The motion_status of this SystemMsg.  # noqa: E501
        :rtype: InlineResponse200
        """
        return self._motion_status

    @motion_status.setter
    def motion_status(self, motion_status):
        """Sets the motion_status of this SystemMsg.


        :param motion_status: The motion_status of this SystemMsg.  # noqa: E501
        :type: InlineResponse200
        """

        self._motion_status = motion_status

    @property
    def wifi(self):
        """Gets the wifi of this SystemMsg.  # noqa: E501


        :return: The wifi of this SystemMsg.  # noqa: E501
        :rtype: Wifi
        """
        return self._wifi

    @wifi.setter
    def wifi(self, wifi):
        """Sets the wifi of this SystemMsg.


        :param wifi: The wifi of this SystemMsg.  # noqa: E501
        :type: Wifi
        """

        self._wifi = wifi

    @property
    def time_stamp(self):
        """Gets the time_stamp of this SystemMsg.  # noqa: E501


        :return: The time_stamp of this SystemMsg.  # noqa: E501
        :rtype: int
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this SystemMsg.


        :param time_stamp: The time_stamp of this SystemMsg.  # noqa: E501
        :type: int
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")  # noqa: E501

        self._time_stamp = time_stamp

    @property
    def battery_status(self):
        """Gets the battery_status of this SystemMsg.  # noqa: E501


        :return: The battery_status of this SystemMsg.  # noqa: E501
        :rtype: int
        """
        return self._battery_status

    @battery_status.setter
    def battery_status(self, battery_status):
        """Sets the battery_status of this SystemMsg.


        :param battery_status: The battery_status of this SystemMsg.  # noqa: E501
        :type: int
        """
        if battery_status is None:
            raise ValueError("Invalid value for `battery_status`, must not be `None`")  # noqa: E501

        self._battery_status = battery_status

    @property
    def backend_errors(self):
        """Gets the backend_errors of this SystemMsg.  # noqa: E501


        :return: The backend_errors of this SystemMsg.  # noqa: E501
        :rtype: Errors
        """
        return self._backend_errors

    @backend_errors.setter
    def backend_errors(self, backend_errors):
        """Sets the backend_errors of this SystemMsg.


        :param backend_errors: The backend_errors of this SystemMsg.  # noqa: E501
        :type: Errors
        """
        if backend_errors is None:
            raise ValueError("Invalid value for `backend_errors`, must not be `None`")  # noqa: E501

        self._backend_errors = backend_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemMsg, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemMsg):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
