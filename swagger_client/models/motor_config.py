# coding: utf-8

"""
    AXIBO OPENSOURCE API

    No description provided   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@axibo.com
    
"""


import pprint
import re  # noqa: F401

import six


class MotorConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pan_accel': 'float',
        'pan_deaccel': 'float',
        'tilt_accel': 'float',
        'tilt_deaccel': 'float',
        'pan_min': 'float',
        'pan_max': 'float',
        'tilt_min': 'float',
        'tilt_max': 'float'
    }

    attribute_map = {
        'pan_accel': 'panAccel',
        'pan_deaccel': 'panDeaccel',
        'tilt_accel': 'tiltAccel',
        'tilt_deaccel': 'tiltDeaccel',
        'pan_min': 'panMin',
        'pan_max': 'panMax',
        'tilt_min': 'tiltMin',
        'tilt_max': 'tiltMax'
    }

    def __init__(self, pan_accel=None, pan_deaccel=None, tilt_accel=None, tilt_deaccel=None, pan_min=None, pan_max=None, tilt_min=None, tilt_max=None):  # noqa: E501
        """MotorConfig - a model defined in Swagger"""  # noqa: E501

        self._pan_accel = None
        self._pan_deaccel = None
        self._tilt_accel = None
        self._tilt_deaccel = None
        self._pan_min = None
        self._pan_max = None
        self._tilt_min = None
        self._tilt_max = None
        self.discriminator = None

        if pan_accel is not None:
            self.pan_accel = pan_accel
        if pan_deaccel is not None:
            self.pan_deaccel = pan_deaccel
        if tilt_accel is not None:
            self.tilt_accel = tilt_accel
        if tilt_deaccel is not None:
            self.tilt_deaccel = tilt_deaccel
        if pan_min is not None:
            self.pan_min = pan_min
        if pan_max is not None:
            self.pan_max = pan_max
        if tilt_min is not None:
            self.tilt_min = tilt_min
        if tilt_max is not None:
            self.tilt_max = tilt_max

    @property
    def pan_accel(self):
        """Gets the pan_accel of this MotorConfig.  # noqa: E501


        :return: The pan_accel of this MotorConfig.  # noqa: E501
        :rtype: float
        """
        return self._pan_accel

    @pan_accel.setter
    def pan_accel(self, pan_accel):
        """Sets the pan_accel of this MotorConfig.


        :param pan_accel: The pan_accel of this MotorConfig.  # noqa: E501
        :type: float
        """

        self._pan_accel = pan_accel

    @property
    def pan_deaccel(self):
        """Gets the pan_deaccel of this MotorConfig.  # noqa: E501


        :return: The pan_deaccel of this MotorConfig.  # noqa: E501
        :rtype: float
        """
        return self._pan_deaccel

    @pan_deaccel.setter
    def pan_deaccel(self, pan_deaccel):
        """Sets the pan_deaccel of this MotorConfig.


        :param pan_deaccel: The pan_deaccel of this MotorConfig.  # noqa: E501
        :type: float
        """

        self._pan_deaccel = pan_deaccel

    @property
    def tilt_accel(self):
        """Gets the tilt_accel of this MotorConfig.  # noqa: E501


        :return: The tilt_accel of this MotorConfig.  # noqa: E501
        :rtype: float
        """
        return self._tilt_accel

    @tilt_accel.setter
    def tilt_accel(self, tilt_accel):
        """Sets the tilt_accel of this MotorConfig.


        :param tilt_accel: The tilt_accel of this MotorConfig.  # noqa: E501
        :type: float
        """

        self._tilt_accel = tilt_accel

    @property
    def tilt_deaccel(self):
        """Gets the tilt_deaccel of this MotorConfig.  # noqa: E501


        :return: The tilt_deaccel of this MotorConfig.  # noqa: E501
        :rtype: float
        """
        return self._tilt_deaccel

    @tilt_deaccel.setter
    def tilt_deaccel(self, tilt_deaccel):
        """Sets the tilt_deaccel of this MotorConfig.


        :param tilt_deaccel: The tilt_deaccel of this MotorConfig.  # noqa: E501
        :type: float
        """

        self._tilt_deaccel = tilt_deaccel

    @property
    def pan_min(self):
        """Gets the pan_min of this MotorConfig.  # noqa: E501


        :return: The pan_min of this MotorConfig.  # noqa: E501
        :rtype: float
        """
        return self._pan_min

    @pan_min.setter
    def pan_min(self, pan_min):
        """Sets the pan_min of this MotorConfig.


        :param pan_min: The pan_min of this MotorConfig.  # noqa: E501
        :type: float
        """

        self._pan_min = pan_min

    @property
    def pan_max(self):
        """Gets the pan_max of this MotorConfig.  # noqa: E501


        :return: The pan_max of this MotorConfig.  # noqa: E501
        :rtype: float
        """
        return self._pan_max

    @pan_max.setter
    def pan_max(self, pan_max):
        """Sets the pan_max of this MotorConfig.


        :param pan_max: The pan_max of this MotorConfig.  # noqa: E501
        :type: float
        """

        self._pan_max = pan_max

    @property
    def tilt_min(self):
        """Gets the tilt_min of this MotorConfig.  # noqa: E501


        :return: The tilt_min of this MotorConfig.  # noqa: E501
        :rtype: float
        """
        return self._tilt_min

    @tilt_min.setter
    def tilt_min(self, tilt_min):
        """Sets the tilt_min of this MotorConfig.


        :param tilt_min: The tilt_min of this MotorConfig.  # noqa: E501
        :type: float
        """

        self._tilt_min = tilt_min

    @property
    def tilt_max(self):
        """Gets the tilt_max of this MotorConfig.  # noqa: E501


        :return: The tilt_max of this MotorConfig.  # noqa: E501
        :rtype: float
        """
        return self._tilt_max

    @tilt_max.setter
    def tilt_max(self, tilt_max):
        """Sets the tilt_max of this MotorConfig.


        :param tilt_max: The tilt_max of this MotorConfig.  # noqa: E501
        :type: float
        """

        self._tilt_max = tilt_max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MotorConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MotorConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
